import asyncio

from aiogram import Dispatcher, types, F, Bot
from aiogram.fsm.context import FSMContext
from database import (
    add_user, check_user_team, create_team, join_team, update_steam_profile,
    get_team_members, create_ticket, get_admin_ids, get_open_tickets,
    add_ticket_response, get_user_id_by_ticket, cursor, conn, get_schedule,
    get_matches, add_match_to_db, delete_match, get_teams_with_members, delete_team,
    update_payment_status, check_payment_status, get_db_connection, set_user_language,
    get_user_language, update_ticket_description
)
from states import RegistrationStates
from keyboards import main_menu_keyboard, team_options_keyboard
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot import bot, dp  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ bot —Ç–∞ dp –∑ —Ñ–∞–π–ª—É bot.py




# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ç—ñ–∫–µ—Ç


async def cmd_reply_ticket(message: types.Message, bot: Bot, state: FSMContext):
    if message.from_user.id in get_admin_ids():
        try:
            parts = message.text.split(maxsplit=2)  # /reply <ticket_id> <–≤—ñ–¥–ø–æ–≤—ñ–¥—å>
            if len(parts) < 3:
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /reply <ticket_id> <–≤—ñ–¥–ø–æ–≤—ñ–¥—å>")
                return

            ticket_id = int(parts[1])  # –û—Ç—Ä–∏–º—É—î–º–æ ticket_id
            response = parts[2].strip()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å

            user_id = get_user_id_by_ticket(ticket_id)  # –û—Ç—Ä–∏–º—É—î–º–æ user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ —Ç—ñ–∫–µ—Ç

            if user_id:
                # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ —Ç—ñ–∫–µ—Ç
                # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ —Ç—ñ–∫–µ—Ç
                user_language = get_user_language(user_id)
                print(f"–ú–æ–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id}: {user_language}")

                # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ —Ç—ñ–∫–µ—Ç–∞
                add_ticket_response(ticket_id, message.from_user.id, response)

                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è" —ñ "–ó–∞–∫—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç"
                continue_text = "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è" if user_language == 'uk' else "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ"
                close_text = "–ó–∞–∫—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç" if user_language == 'uk' else "–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç"
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text=continue_text, callback_data=f"continue_{ticket_id}")],
                        [InlineKeyboardButton(text=close_text, callback_data=f"close_{ticket_id}")]
                    ]
                )

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –Ω–∞ –π–æ–≥–æ –º–æ–≤—ñ
                if user_language == 'uk':
                    await bot.send_message(user_id, f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ –≤–∞—à —Ç—ñ–∫–µ—Ç #{ticket_id}: {response}",
                                           reply_markup=keyboard)
                else:
                    await bot.send_message(user_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç #{ticket_id}: {response}",
                                           reply_markup=keyboard)

                # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await message.answer(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç—ñ–∫–µ—Ç #{ticket_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
            else:
                await message.answer(f"–¢—ñ–∫–µ—Ç –∑ ID {ticket_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except (IndexError, ValueError) as e:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /reply <ticket_id> <–≤—ñ–¥–ø–æ–≤—ñ–¥—å>")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ç—ñ–∫–µ—Ç–∏.")



# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def cmd_start(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = message.from_user

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    add_user(user)
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", callback_data="lang_uk")],
            [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")]
        ]
    )
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è/–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:", reply_markup=keyboard)



async def send_main_menu(message: types.Message, user_id: int):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(user_id, db)
    print(f"–ú–æ–≤–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {user_language}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–≤–∏

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –º–µ–Ω—é
    if user_language == 'uk':
        welcome_text = "–í—ñ—Ç–∞—î–º–æ –Ω–∞ —Ç—É—Ä–Ω—ñ—Ä—ñ –∑ RUST! –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:"
    else:
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –ø–æ RUST! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"

    print(f"–í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –º–æ–≤–æ—é –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {user_language}")  # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏

    await message.answer(welcome_text, reply_markup=main_menu_keyboard(user_language))


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥–∏"
async def cmd_register_team(message: types.Message, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_language = get_user_language(message.from_user.id, db)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ
        user_team = check_user_team(message.from_user.id)

        if user_team:
            if user_language == 'uk':
                await message.answer(f"–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –∫–æ–º–∞–Ω–¥—ñ {user_team}.")
            else:
                await message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–º–∞–Ω–¥–µ {user_team}.")
        else:
            if user_language == 'uk':
                await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏:")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
            await state.set_state(RegistrationStates.waiting_for_team_name)

    except Exception as e:
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        db.close()


# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫–æ–º–∞–Ω–¥–∏
async def process_team_name(message: types.Message, state: FSMContext):
    team_name = message.text.strip()

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_language = get_user_language(message.from_user.id, db)  # –ü–µ—Ä–µ–¥–∞—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–∞–Ω–¥—É
        invite_code = create_team(message.from_user.id, team_name)

        if user_language == 'uk':
            await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{team_name}' —Å—Ç–≤–æ—Ä–µ–Ω–∞! –ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: {invite_code}")
        else:
            await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{team_name}' —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite_code}")

        # –ü—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫–æ–º–∞–Ω–¥–∏ –∑–∞–ø–∏—Ç—É—î–º–æ Steam –ø—Ä–æ—Ñ—ñ–ª—å
        if user_language == 'uk':
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à Steam –ø—Ä–æ—Ñ—ñ–ª—å (–ø–æ—Å–∏–ª–∞–Ω–Ω—è):")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Steam –ø—Ä–æ—Ñ–∏–ª—å (—Å—Å—ã–ª–∫–∞):")

        await state.set_state(RegistrationStates.waiting_for_steam_profile)

    except Exception as e:
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
        db.close()




# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è Steam –ø—Ä–æ—Ñ—ñ–ª—é
async def process_steam_profile(message: types.Message, state: FSMContext):
    steam_profile = message.text.strip()

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    try:
        # –û–Ω–æ–≤–ª—é—î–º–æ Steam –ø—Ä–æ—Ñ—ñ–ª—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        update_steam_profile(message.from_user.id, steam_profile)

        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_language = get_user_language(message.from_user.id, db)

        # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–≤–∏
        if user_language == 'uk':
            await message.answer("–í–∞—à Steam –ø—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        else:
            await message.answer("–í–∞—à Steam –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

        await state.clear()  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω

    except Exception as e:
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
        db.close()






# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë• –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏"
async def cmd_join_team(message: types.Message, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ
    if check_user_team(message.from_user.id):
        if user_language == 'uk':
            await message.answer("–í–∏ –≤–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ.")
        else:
            await message.answer("–í—ã —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
    else:
        if user_language == 'uk':
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –≤—ñ–¥ –∫–∞–ø—ñ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∏:")
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã:")

        await state.set_state(RegistrationStates.waiting_for_invite_code)


# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
async def process_invite_code(message: types.Message, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    invite_code = message.text.strip()
    result, captain_id = join_team(message.from_user.id, invite_code)

    if result == True:
        if user_language == 'uk':
            await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏!")
        else:
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!")

        # –ü—ñ—Å–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É—î–º–æ Steam –ø—Ä–æ—Ñ—ñ–ª—å
        if user_language == 'uk':
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à Steam –ø—Ä–æ—Ñ—ñ–ª—å (–ø–æ—Å–∏–ª–∞–Ω–Ω—è):")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Steam –ø—Ä–æ—Ñ–∏–ª—å (—Å—Å—ã–ª–∫–∞):")

        await state.set_state(RegistrationStates.waiting_for_steam_profile)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–∞–ø—ñ—Ç–∞–Ω—É –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è
        captain_message = f"–î–æ –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –≥—Ä–∞–≤–µ—Ü—å: {message.from_user.first_name} (@{message.from_user.username})" if user_language == 'uk' else f"–ö –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∏–≥—Ä–æ–∫: {message.from_user.first_name} (@{message.from_user.username})"
        try:
            await bot.send_message(captain_id, captain_message)
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–∞–ø—ñ—Ç–∞–Ω—É: {e}")

    elif result == False:
        if user_language == 'uk':
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞.")
        else:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")
    else:
        if user_language == 'uk':
            await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É"
async def cmd_view_team(message: types.Message):
    user_id = message.from_user.id

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
        user_language = get_user_language(user_id, db)

        team_id = check_user_team(user_id)

        if team_id:
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏
            cursor.execute("SELECT team_name FROM teams WHERE team_id = ?", (team_id,))
            team_name = cursor.fetchone()

            if team_name:
                # –û—Ç—Ä–∏–º—É—î–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥–∏
                team_members = get_team_members(team_id)

                if team_members:
                    if user_language == 'uk':
                        response = f"–£ –≤–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ '{team_name[0]}':\n"
                    else:
                        response = f"–í –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ '{team_name[0]}':\n"

                    # –î–æ–¥–∞—î–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    for member in team_members:
                        response += f"- {member[1]} (@{member[0]}) - {member[2]}\n"

                    await message.answer(response, reply_markup=team_options_keyboard())
                else:
                    if user_language == 'uk':
                        await message.answer(f"–£ –≤–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ '{team_name[0]}' –Ω–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤.")
                    else:
                        await message.answer(f"–í –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ '{team_name[0]}' –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            else:
                if user_language == 'uk':
                    await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏.")
                else:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.")
        else:
            if user_language == 'uk':
                await message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –∂–æ–¥–Ω—ñ–π –∫–æ–º–∞–Ω–¥—ñ.")
            else:
                await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ
        db.close()



# –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç–∞
async def cmd_create_ticket(message: types.Message, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    if user_language == 'uk':
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")

    await state.set_state(RegistrationStates.waiting_for_ticket_description)


# –û–±—Ä–æ–±–∫–∞ –æ–ø–∏—Å—É —Ç—ñ–∫–µ—Ç–∞
import os

async def process_ticket_description(message: types.Message, state: FSMContext, bot: Bot):
    description = ""

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å—Ç–∞–≤–∏–º–æ "unknown", —è–∫—â–æ –≤—ñ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
    username = message.from_user.username if message.from_user.username else "unknown"

    # –û–±—Ä–æ–±–∫–∞ –º–µ–¥—ñ–∞ (—Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ)
    if message.photo or message.video:
        if message.photo:
            file_id = message.photo[-1].file_id
            file_type = 'photo'
        elif message.video:
            file_id = message.video.file_id
            file_type = 'video'

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ –∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –Ω—ñ–∫–Ω–µ–π–º—É –¥–æ –Ω–∞–∑–≤–∏
        file = await bot.get_file(file_id)
        file_path = f"ticketdoc/ticket_{message.message_id}_{username}_{file_type}.{file.file_path.split('.')[-1]}"
        await bot.download_file(file.file_path, file_path)

        # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–µ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ
        description = f"–û—Ç—Ä–∏–º–∞–Ω–æ {file_type}."

        # –Ø–∫—â–æ —î —Ç–µ–∫—Å—Ç —Ä–∞–∑–æ–º —ñ–∑ –º–µ–¥—ñ–∞
        if message.caption:
            description = message.caption

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_ids = get_admin_ids()
        for admin_id in admin_ids:
            if file_type == 'photo':
                await bot.send_photo(admin_id, photo=file_id, caption=f"–ù–æ–≤–∏–π —Ç—ñ–∫–µ—Ç –≤—ñ–¥ {message.from_user.first_name} (@{username}): {description}")
            elif file_type == 'video':
                await bot.send_video(admin_id, video=file_id, caption=f"–ù–æ–≤–∏–π —Ç—ñ–∫–µ—Ç –≤—ñ–¥ {message.from_user.first_name} (@{username}): {description}")

    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ, –∞–ª–µ —î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if message.text and not message.photo and not message.video:
        description = message.text.strip()

    # –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –±–µ–∑ —Ç–µ–∫—Å—Ç—É
    if not description:
        description = "–û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ."

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—ñ–∫–µ—Ç
    ticket_id = create_ticket(message.from_user.id, description)

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db = get_db_connection()
    user_language = get_user_language(message.from_user.id, db)
    db.close()

    if user_language == 'uk':
        await message.answer(f"–¢—ñ–∫–µ—Ç #{ticket_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ —Å–∫–æ—Ä–æ –¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
    else:
        await message.answer(f"–¢–∏–∫–µ—Ç #{ticket_id} —Å–æ–∑–¥–∞–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ –¥–∞–¥—É—Ç –æ—Ç–≤–µ—Ç.")

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç
    admin_ids = get_admin_ids()
    for admin_id in admin_ids:
        if user_language == 'uk':
            await bot.send_message(admin_id, f"–ù–æ–≤–∏–π —Ç—ñ–∫–µ—Ç #{ticket_id} –≤—ñ–¥ {message.from_user.first_name} (@{username}): {description}")
        else:
            await bot.send_message(admin_id, f"–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç {message.from_user.first_name} (@{username}): {description}")

    await state.clear()



# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç—ñ–∫–µ—Ç—ñ–≤
async def cmd_view_tickets(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    if message.from_user.id in get_admin_ids():
        tickets = get_open_tickets()  # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤

        if tickets:
            response = "–ê–∫—Ç–∏–≤–Ω—ñ —Ç—ñ–∫–µ—Ç–∏:\n" if user_language == 'uk' else "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã:\n"

            for ticket in tickets:
                response += f"#{ticket[0]}: {ticket[2]} (–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {ticket[1]})\n" if user_language == 'uk' else f"#{ticket[0]}: {ticket[2]} (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {ticket[1]})\n"
            await message.answer(response)
        else:
            no_tickets_message = "–ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤." if user_language == 'uk' else "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤."
            await message.answer(no_tickets_message)
    else:
        no_access_message = "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç—ñ–∫–µ—Ç—ñ–≤." if user_language == 'uk' else "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤."
        await message.answer(no_access_message)




async def cmd_reply_ticket(message: types.Message, bot: Bot, state: FSMContext, user_language=None):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()


    if user_language is None:  # –Ø–∫—â–æ –º–æ–≤–∞ –Ω–µ –ø –µ—Ä–µ–¥–∞–Ω–∞, –æ—Ç—Ä–∏–º—É—î–º–æ —ó—ó –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        user_language = get_user_language(message.from_user.id)

    if message.from_user.id in get_admin_ids():
        try:
            # –í–∏–≤–æ–¥–∏–º–æ –º–æ–≤—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            print(f"–ú–æ–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_language}")

            # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
            parts = message.text.split(maxsplit=2)  # /reply <ticket_id> <–≤—ñ–¥–ø–æ–≤—ñ–¥—å>
            if len(parts) < 3:
                if user_language == 'uk':
                    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /reply <ticket_id> <–≤—ñ–¥–ø–æ–≤—ñ–¥—å>")
                else:
                    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply <ticket_id> <–æ—Ç–≤–µ—Ç>")
                return

            ticket_id = int(parts[1])  # –û—Ç—Ä–∏–º—É—î–º–æ ticket_id
            response = parts[2].strip()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç—ñ–∫–µ—Ç —É —Å—Ç–∞–Ω—ñ
            await state.update_data(active_ticket_id=ticket_id)
            await state.set_state(RegistrationStates.waiting_for_ticket_response)

            current_state = await state.get_state()
            print(f"–°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {current_state}")

            # –û—Ç—Ä–∏–º—É—î–º–æ user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ —Ç—ñ–∫–µ—Ç
            user_id = get_user_id_by_ticket(ticket_id)
            print(f"–û—Ç—Ä–∏–º–∞–Ω–æ user_id –¥–ª—è —Ç—ñ–∫–µ—Ç–∞ #{ticket_id}: {user_id}")

            if user_id:
                # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
                if not user_language:
                    user_language = get_user_language(user_id)

                # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ —Ç—ñ–∫–µ—Ç–∞
                add_ticket_response(ticket_id, message.from_user.id, response)

                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–≤–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏: –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –ó–∞–∫—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç
                continue_button = InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è" if user_language == 'uk' else "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ", callback_data=f"continue_{ticket_id}")
                close_button = InlineKeyboardButton(text="–ó–∞–∫—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç" if user_language == 'uk' else "–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_{ticket_id}")
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[continue_button], [close_button]])

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –Ω–∞ –π–æ–≥–æ –º–æ–≤—ñ
                if user_language == 'uk':
                    await bot.send_message(user_id, f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ –≤–∞—à —Ç—ñ–∫–µ—Ç #{ticket_id}: {response}",
                                           reply_markup=keyboard)
                else:
                    await bot.send_message(user_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç #{ticket_id}: {response}",
                                           reply_markup=keyboard)

                await message.answer(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç—ñ–∫–µ—Ç #{ticket_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ." if user_language == 'uk' else f"–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            else:
                await message.answer(f"–¢—ñ–∫–µ—Ç –∑ ID {ticket_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." if user_language == 'uk' else f"–¢–∏–∫–µ—Ç —Å ID {ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except (IndexError, ValueError) as e:
            print(f"–ü–æ–º–∏–ª–∫–∞: {e}")  # –õ–æ–≥ –¥–ª—è –ø–æ–º–∏–ª–∫–∏
            if user_language == 'uk':
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /reply <ticket_id> <–≤—ñ–¥–ø–æ–≤—ñ–¥—å>")
            else:
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply <ticket_id> <–æ—Ç–≤–µ—Ç>")
    else:
        if user_language == 'uk':
            await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ç—ñ–∫–µ—Ç–∏.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç—ã.")




# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è —Ç—ñ–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /close (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
async def cmd_close_ticket(message: types.Message):
    parts = message.text.split(maxsplit=1)  # /close <ticket_id>

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    if len(parts) == 2:
        try:
            ticket_id = int(parts[1])
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç—ñ–∫–µ—Ç–∞ –Ω–∞ "closed"
            cursor.execute('UPDATE tickets SET status = ? WHERE ticket_id = ?', ('closed', ticket_id))
            conn.commit()

            async def cmd_close_ticket(message: types.Message):
                user_language = get_user_language(message.from_user.id)  # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                parts = message.text.split(maxsplit=1)  # /close <ticket_id>

                if len(parts) == 2:
                    try:
                        ticket_id = int(parts[1])
                        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç—ñ–∫–µ—Ç–∞ –Ω–∞ "closed"
                        cursor.execute('UPDATE tickets SET status = ? WHERE ticket_id = ?', ('closed', ticket_id))
                        conn.commit()

                        if user_language == 'uk':
                            await message.answer(f"–¢—ñ–∫–µ—Ç #{ticket_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ.")
                        else:
                            await message.answer(f"–¢–∏–∫–µ—Ç #{ticket_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
                    except ValueError:
                        if user_language == 'uk':
                            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /close <ticket_id>")
                        else:
                            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /close <ticket_id>")
                else:
                    if user_language == 'uk':
                        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /close <ticket_id>")
                    else:
                        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /close <ticket_id>")

            await message.answer(f"–¢—ñ–∫–µ—Ç #{ticket_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ.")
        except ValueError:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /close <ticket_id>")
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /close <ticket_id>")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è —Ç—ñ–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ callback-–∫–Ω–æ–ø–∫—É (–¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)

async def process_close_ticket(callback_query: types.CallbackQuery):
    ticket_id = int(callback_query.data.split('_')[1])  # –û—Ç—Ä–∏–º—É—î–º–æ ticket_id –∑ callback_data

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(callback_query.from_user.id, db)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ callback_query

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç—ñ–∫–µ—Ç–∞ –Ω–∞ "closed"
    cursor.execute('UPDATE tickets SET status = ? WHERE ticket_id = ?', ('closed', ticket_id))
    conn.commit()

    # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è —Ç—ñ–∫–µ—Ç–∞
    if user_language == 'uk':
        await callback_query.message.answer(f"–¢—ñ–∫–µ—Ç #{ticket_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ.")
    else:
        await callback_query.message.answer(f"–¢–∏–∫–µ—Ç #{ticket_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")

    # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è —Ç—ñ–∫–µ—Ç–∞
    await callback_query.message.edit_reply_markup(reply_markup=None)



async def user_reply_to_ticket(message: types.Message, state: FSMContext, bot: Bot):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    data = await state.get_data()
    ticket_id = data.get('active_ticket_id')  # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç—ñ–∫–µ—Ç —ñ–∑ —Å—Ç–∞–Ω—É

    if ticket_id:
        response = message.text.strip()
        print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Ç—ñ–∫–µ—Ç {ticket_id}: {response}")

        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ —Ç—ñ–∫–µ—Ç–∞
        add_ticket_response(ticket_id, message.from_user.id, response)

        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_language = get_user_language(message.from_user.id)

        # –°–ø–æ–≤—ñ—â–∞—î–º–æ –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        admin_ids = get_admin_ids()
        for admin_id in admin_ids:
            await bot.send_message(admin_id,
                                   f"–ù–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Ç—ñ–∫–µ—Ç–∞ #{ticket_id} –≤—ñ–¥ {message.from_user.first_name}: {response}")

        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞ –π–æ–≥–æ –º–æ–≤—ñ
        if user_language == 'uk':
            await message.answer(f"–í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Ç—ñ–∫–µ—Ç–∞ #{ticket_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        else:
            await message.answer(f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä –∫ —Ç–∏–∫–µ—Ç—É #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

        await state.clear()  # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    else:
        # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        user_language = get_user_language(message.from_user.id)

        if user_language == 'uk':
            await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—ñ–∫–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É.")
        else:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.")


async def process_continue(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(callback_query.from_user.id,db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    ticket_id = int(callback_query.data.split('_')[1])  # –û—Ç—Ä–∏–º—É—î–º–æ ticket_id –∑ callback_data

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_language = get_user_language(callback_query.from_user.id)

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
    if user_language == 'uk':
        await callback_query.message.answer(f"–ü—Ä–æ–¥–æ–≤–∂—ñ—Ç—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –ø–æ —Ç—ñ–∫–µ—Ç—É #{ticket_id}. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
    else:
        await callback_query.message.answer(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç—ñ–∫–µ—Ç —É —Å—Ç–∞–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await state.update_data(active_ticket_id=ticket_id)
    await state.set_state(RegistrationStates.waiting_for_ticket_response)



async def cmd_add_match(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    if message.from_user.id in get_admin_ids():
        try:
            # –û—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç: /add_match <–¥–∞—Ç–∞> <—á–∞—Å>
            parts = message.text.split(maxsplit=2)
            if len(parts) != 3:
                user_language = get_user_language(message.from_user.id)
                if user_language == 'uk':
                    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /add_match <–¥–∞—Ç–∞> <—á–∞—Å> (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2024-09-20 18:00)")
                else:
                    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_match <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-09-20 18:00)")
                return

            match_date = parts[1].strip()
            match_time = parts[2].strip()

            # –î–æ–¥–∞—î–º–æ –º–∞—Ç—á —É –±–∞–∑—É –¥–∞–Ω–∏—Ö
            add_match_to_db(match_date, match_time)

            user_language = get_user_language(message.from_user.id)
            if user_language == 'uk':
                await message.answer(f"–ú–∞—Ç—á –Ω–∞ {match_date} –æ {match_time} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.")
            else:
                await message.answer(f"–ú–∞—Ç—á –Ω–∞ {match_date} –≤ {match_time} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception as e:
            await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
    else:
        user_language = get_user_language(message.from_user.id)
        if user_language == 'uk':
            await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π.")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á—É
async def add_match(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()


    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_language = get_user_language(message.from_user.id)

        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å
        match_date, match_time = message.text.split()[1:3]

        # –î–æ–¥–∞—î–º–æ –º–∞—Ç—á –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        cursor.execute("INSERT INTO matches (match_date, match_time) VALUES (?, ?)", (match_date, match_time))
        conn.commit()

        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_language == 'uk':
            await message.answer(f"–ú–∞—Ç—á –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ {match_date} –æ {match_time}.")
        else:
            await message.answer(f"–ú–∞—Ç—á –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {match_date} –≤ {match_time}.")
    except Exception as e:
        if user_language == 'uk':
            await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        else:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")



async def cmd_view_schedule(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –º–∞—Ç—á—ñ
    matches = get_matches()

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –º–∞—Ç—á—ñ–≤ —Ç–∞ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if matches:
        response = "–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –º–∞—Ç—á—ñ:\n" if user_language == 'uk' else "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏:\n"
        for match in matches:
            response += f"- {match[0]} –æ {match[1]}\n"
    else:
        response = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤." if user_language == 'uk' else "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π."

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer(response)




async def cmd_view_schedule_button(message: types.Message):
    await cmd_view_schedule(message)


async def cmd_delete_match(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_language = get_user_language(message.from_user.id)

    if message.from_user.id in get_admin_ids():
        try:
            parts = message.text.split(maxsplit=1)
            if len(parts) != 2:
                if user_language == 'uk':
                    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /delete_match <match_id>")
                else:
                    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_match <match_id>")
                return

            match_id = int(parts[1].strip())
            delete_match(match_id)

            if user_language == 'uk':
                await message.answer(f"–ú–∞—Ç—á –∑ ID {match_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
            else:
                await message.answer(f"–ú–∞—Ç—á —Å ID {match_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        except Exception as e:
            if user_language == 'uk':
                await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
            else:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        if user_language == 'uk':
            await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–∞—Ç—á—ñ–≤.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π.")




async def cmd_faq(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    try:
        # –í–∏–±–∏—Ä–∞—î–º–æ —Ñ–∞–π–ª FAQ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_language == 'uk':
            faq_file = 'faq.txt'
        else:
            faq_file = 'faqru.txt'

        # –ß–∏—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
        with open(faq_file, 'r', encoding='utf-8') as file:
            faq_text = file.read()

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É
        await message.answer(faq_text)
    except Exception as e:
        if user_language == 'uk':
            await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ FAQ: {e}")
        else:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ: {e}")



async def cmd_rules(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    try:
        # –í–∏–±–∏—Ä–∞—î–º–æ —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_language == 'uk':
            rules_file = "rules.txt"
        else:
            rules_file = "rulesru.txt"

        # –ß–∏—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ñ–∞–π–ª –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏
        with open(rules_file, "r", encoding="utf-8") as file:
            rules = file.read()

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–∞–≤–∏–ª–∞
        await message.answer(rules)
    except Exception as e:
        if user_language == 'uk':
            await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—Ä–∞–≤–∏–ª: {e}")
        else:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–∏–ª: {e}")




async def cmd_view_teams_with_members(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()


    if message.from_user.id in get_admin_ids():
        teams = get_teams_with_members()
        if teams:
            if user_language == 'uk':
                response = "–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ —ó—Ö–Ω—ñ —É—á–∞—Å–Ω–∏–∫–∏:\n"
            else:
                response = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n"

            current_team = None
            for team in teams:
                team_name, username, first_name, last_name, steam_profile = team
                if team_name != current_team:
                    if current_team is not None:
                        response += "\n"  # –í—ñ–¥–¥—ñ–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –º—ñ–∂ —Å–æ–±–æ—é
                    response += f"\n–ö–æ–º–∞–Ω–¥–∞: {team_name}\n"  # –í–∏–≤–æ–¥–∏–º–æ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏
                    current_team = team_name
                response += f"  - @{username} ({first_name or ''} {last_name or ''}) - {steam_profile}\n"

            await message.answer(response)
        else:
            await message.answer("–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥." if user_language == 'uk' else "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥." if user_language == 'uk' else "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.")



# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫–æ–º–∞–Ω–¥–∏
async def process_edit_team_name(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(callback_query.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    user_language = get_user_language(callback_query.from_user.id)
    prompt = "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏:" if user_language == 'uk' else "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:"
    await callback_query.message.answer(prompt)
    await state.set_state(RegistrationStates.waiting_for_new_team_name)



# –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ—ó –Ω–∞–∑–≤–∏ –∫–æ–º–∞–Ω–¥–∏
async def process_new_team_name(message: types.Message, state: FSMContext):
    user_language = get_user_language(message.from_user.id)
    new_team_name = message.text.strip()

    # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    cursor.execute('UPDATE teams SET team_name = ? WHERE team_id = (SELECT team_id FROM users WHERE user_id = ?)', (new_team_name, message.from_user.id))
    conn.commit()

    confirmation = f"–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: {new_team_name}" if user_language == 'uk' else f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_team_name}"
    await message.answer(confirmation)
    await state.clear()


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
async def cmd_delete_team(message: types.Message, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    user_id = message.from_user.id
    team_id = check_user_team(user_id)

    if team_id:
        delete_team(team_id)
        if user_language == 'uk':
            await message.answer("–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start —É —á–∞—Ç.")
            await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start —É —á–∞—Ç.")
        else:
            await message.answer("–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞.–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ —á–∞—Ç")
            await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ —á–∞—Ç.")
        await state.clear()
    else:
        if user_language == 'uk':
            await message.answer("–í–∏ –Ω–µ —î –∫–∞–ø—ñ—Ç–∞–Ω–æ–º –∂–æ–¥–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏.")
        else:
            await message.answer("–í—ã –Ω–µ –∫–∞–ø–∏—Ç–∞–Ω –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")



async def cmd_pay_participation(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()


    try:
        payment_status = check_payment_status(message.from_user.id)

        if payment_status == "Done":
            if user_language == 'uk':
                await message.answer("–í–∏ –≤–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤—Ö—ñ–¥ –∑–∞ —Ç—É—Ä–Ω—ñ—Ä.")
            else:
                await message.answer("–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ.")
        else:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ —Å–µ–±–µ" if user_language == 'uk' else "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞ —Å–µ–±—è", callback_data="pay_self"),
                    types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ –∫–æ–º–∞–Ω–¥—É" if user_language == 'uk' else "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫–æ–º–∞–Ω–¥—É", callback_data="pay_team")
                ]
            ])
            await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –æ–ø–ª–∞—Ç–∏:" if user_language == 'uk' else "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
    except Exception as e:
        await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}" if user_language == 'uk' else f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def process_payment_for_self(callback_query: types.CallbackQuery):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(callback_query.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()


    if user_language == 'uk':
        await callback_query.message.answer("–û–ø–ª–∞—Ç—ñ—Ç—å –∑–∞ —É—á–∞—Å—Ç—å. –í–∞—à—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏: https://send.monobank.ua/jar/example")
        await callback_query.message.answer("–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç.")
    else:
        await callback_query.message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ. –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: https://send.monobank.ua/jar/example")
        await callback_query.message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")




async def process_payment_for_team(callback_query: types.CallbackQuery):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(callback_query.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()


    if user_language == 'uk':
        await callback_query.message.answer("–û–ø–ª–∞—Ç—ñ—Ç—å –∑–∞ —É—á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥–∏. –í–∞—à—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏: https://send.monobank.ua/jar/team-example")
        await callback_query.message.answer("–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç.")
    else:
        await callback_query.message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã. –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: https://send.monobank.ua/jar/team-example")
        await callback_query.message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")


async def process_payment_screenshot(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(message.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        approve_text = "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–π—à–ª–∞" if user_language == 'uk' else "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞"
        deny_text = "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–∏–π—à–ª–∞" if user_language == 'uk' else "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text=approve_text, callback_data=f"payment_approved_{message.from_user.id}"),
                types.InlineKeyboardButton(text=deny_text, callback_data=f"payment_denied_{message.from_user.id}")
            ]
        ])

        if message.photo:
            photo = message.photo[-1].file_id

            admin_ids = get_admin_ids()  # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
            for admin_id in admin_ids:
                try:
                    await message.bot.send_photo(
                        admin_id,
                        photo=photo,
                        caption=f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–¥ {message.from_user.username} –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–ø–ª–∞—Ç–∏." if user_language == 'uk' else f"–ü–æ–ª—É—á–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç {message.from_user.username} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã.",
                        reply_markup=keyboard  # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
                    )
                except Exception as e:
                    await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin_id}. –ü–æ–º–∏–ª–∫–∞: {e}")

            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –±–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
            await message.answer("–°–∫—Ä—ñ–Ω—à–æ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É." if user_language == 'uk' else "–°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç." if user_language == 'uk' else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")

    except Exception as e:
        await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}" if user_language == 'uk' else f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")




async def process_payment_confirmation(callback_query: types.CallbackQuery):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(callback_query.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()


    user_id = callback_query.data.split('_')[2]

    update_payment_status(user_id, "Done")
    await callback_query.message.answer(f"–û–ø–ª–∞—Ç–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –±—É–ª–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞." if user_language == 'uk' else f"–û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")




async def process_payment_rejection(callback_query: types.CallbackQuery):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(callback_query.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()


    user_id = callback_query.data.split('_')[2]

    update_payment_status(user_id, "Failed")
    await callback_query.message.answer(f"–û–ø–ª–∞—Ç–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞." if user_language == 'uk' else f"–û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")



async def process_payment_option(callback_query: types.CallbackQuery):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(callback_query.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    if callback_query.data == "pay_self":
        await callback_query.message.answer("–î–ª—è –æ–ø–ª–∞—Ç–∏ —É—á–∞—Å—Ç—ñ –∑–∞ —Å–µ–±–µ, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: [–í–∞—à–∞ —Å–∏–ª–∫–∞ –Ω–∞ –±–∞–Ω–∫—É –∞–±–æ –∫–∞—Ä—Ç—É]" if user_language == 'uk' else "–î–ª—è –æ–ø–ª–∞—Ç—ã —É—á–∞—Å—Ç–∏—è –∑–∞ —Å–µ–±—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–Ω–∫ –∏–ª–∏ –∫–∞—Ä—Ç—É]")
    elif callback_query.data == "pay_team":
        await callback_query.message.answer("–î–ª—è –æ–ø–ª–∞—Ç–∏ —É—á–∞—Å—Ç—ñ –∑–∞ –∫–æ–º–∞–Ω–¥—É, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: [–í–∞—à–∞ —Å–∏–ª–∫–∞ –Ω–∞ –±–∞–Ω–∫—É –∞–±–æ –∫–∞—Ä—Ç—É]" if user_language == 'uk' else "–î–ª—è –æ–ø–ª–∞—Ç—ã —É—á–∞—Å—Ç–∏—è –∑–∞ –∫–æ–º–∞–Ω–¥—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–Ω–∫ –∏–ª–∏ –∫–∞—Ä—Ç—É]")

    await callback_query.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
async def payment_approved(callback_query: types.CallbackQuery):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    user_language = get_user_language(callback_query.from_user.id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()


    user_id = callback_query.data.split('_')[-1]


    update_payment_status(user_id, "Done")

    confirmation_message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ç—É—Ä–Ω—ñ—Ä—ñ. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–∞—à–æ–≥–æ Discord: https://discord.gg/BfCzeXVEru" if user_language == 'uk' else "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É Discord: https://discord.gg/BfCzeXVEru"
    await callback_query.bot.send_message(user_id, confirmation_message)

    await callback_query.message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–π—à–ª–∞, —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ 'Done'." if user_language == 'uk' else "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'Done'.")
    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–º–æ–≤–∏ –≤ –æ–ø–ª–∞—Ç—ñ
async def payment_denied(callback_query: types.CallbackQuery):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ callback_data
    user_id = callback_query.data.split('_')[-1]

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    user_language = get_user_language(user_id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.close()

    rejection_message = "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞. –Ø–∫—â–æ —Ç–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π —É —Ç–æ–º—É, —â–æ –æ–ø–ª–∞—Ç–∏–≤, –≤—ñ–¥–∫—Ä–∏–π —Ç—ñ–∫–µ—Ç —Ç—É—Ç –∞–±–æ –≤ –Ω–∞—à–æ–º—É Discord –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏: https://discord.gg/BfCzeXVEru" if user_language == 'uk' else "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª, –æ—Ç–∫—Ä–æ–π —Ç–∏–∫–µ—Ç –∑–¥–µ—Å—å –∏–ª–∏ –≤ –Ω–∞—à–µ–º Discord –¥–ª—è –ø–æ–º–æ—â–∏: https://discord.gg/BfCzeXVEru"
    await callback_query.bot.send_message(user_id, rejection_message)

    await callback_query.message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è." if user_language == 'uk' else "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await callback_query.answer()




async def process_language_choice(callback_query: types.CallbackQuery):
    lang = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    try:
        # –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        print(f"–û–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–∞ {lang}")
        set_user_language(user_id, lang)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
        if lang == 'uk':
            await callback_query.message.answer("–í–∏ –æ–±—Ä–∞–ª–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É.")
        else:
            await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.")

        # –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await send_main_menu(callback_query.message, user_id)

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        await callback_query.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é
        db.close()



async def send_main_menu(message: types.Message, user_id: int):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    db = get_db_connection()

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_language = get_user_language(user_id, db)

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é
    db.close()

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –º–µ–Ω—é
    if user_language == 'uk':
        welcome_text = "–í—ñ—Ç–∞—î–º–æ –Ω–∞ —Ç—É—Ä–Ω—ñ—Ä—ñ –∑ RUST! –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:"
    else:
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –ø–æ RUST! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"

    # –ü–µ—Ä–µ–¥–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ñ—É–Ω–∫—Ü—ñ—é main_menu_keyboard
    await message.answer(welcome_text, reply_markup=main_menu_keyboard(user_language))


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
def register_message_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    dp.message.register(cmd_start, F.text == "/start")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_register_team, F.text == "üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥–∏")
    dp.message.register(cmd_join_team, F.text == "üë• –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏")
    dp.message.register(cmd_view_team, F.text == "üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É")
    dp.message.register(cmd_create_ticket, F.text == "üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç")
    dp.message.register(cmd_view_tickets, F.text == "üëÅ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç—ñ–∫–µ—Ç–∏")
    dp.message.register(cmd_view_schedule_button, F.text == "üìÜ –†–æ–∑–∫–ª–∞–¥ –º–∞—Ç—á—ñ–≤")
    dp.message.register(cmd_view_schedule, F.text == "üóì –†–æ–∑–∫–ª–∞–¥ –º–∞—Ç—á—ñ–≤")
    dp.message.register(cmd_faq, F.text == "‚ÑπÔ∏è FAQ")
    dp.message.register(cmd_rules, F.text == "üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω—ñ—Ä—É")
    dp.message.register(cmd_pay_participation, F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ —É—á–∞—Å—Ç—å")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–ª—è —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_register_team, F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã")
    dp.message.register(cmd_join_team, F.text == "üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ")
    dp.message.register(cmd_view_team, F.text == "üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—É")
    dp.message.register(cmd_create_ticket, F.text == "üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
    dp.message.register(cmd_view_tickets, F.text == "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∏–∫–µ—Ç—ã")
    dp.message.register(cmd_view_schedule_button, F.text == "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π")
    dp.message.register(cmd_view_schedule, F.text == "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π")
    dp.message.register(cmd_faq, F.text == "‚ÑπÔ∏è FAQ")
    dp.message.register(cmd_rules, F.text == "üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞")
    dp.message.register(cmd_pay_participation, F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ")

    # –Ü–Ω—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –º–æ–≤–∏
    dp.message.register(process_team_name, RegistrationStates.waiting_for_team_name)
    dp.message.register(process_steam_profile, RegistrationStates.waiting_for_steam_profile)
    dp.message.register(process_invite_code, RegistrationStates.waiting_for_invite_code)
    dp.message.register(process_ticket_description, RegistrationStates.waiting_for_ticket_description)
    dp.message.register(cmd_reply_ticket, F.text.startswith("/reply"))
    dp.message.register(user_reply_to_ticket, RegistrationStates.waiting_for_ticket_response)
    dp.message.register(cmd_close_ticket, F.text.startswith("/close"))
    dp.message.register(cmd_add_match, F.text.startswith("/add_match"))
    dp.message.register(cmd_delete_match, F.text.startswith("/delete_match"))
    dp.message.register(cmd_view_teams_with_members, F.text.startswith("/view_teams"))
    dp.message.register(process_new_team_name, RegistrationStates.waiting_for_new_team_name)
    dp.message.register(process_payment_screenshot, F.content_type == types.ContentType.PHOTO)

def register_callback_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è callback –¥–∞–Ω–∏—Ö"""
    dp.callback_query.register(process_continue, F.data.startswith('continue_'))
    dp.callback_query.register(process_close_ticket, F.data.startswith('close_'))
    dp.callback_query.register(process_edit_team_name, F.data == "edit_team_name")
    dp.callback_query.register(cmd_delete_team, F.data == "delete_team")
    dp.callback_query.register(process_payment_for_self, F.data == "pay_for_self")
    dp.callback_query.register(process_payment_for_team, F.data == "pay_for_team")
    dp.callback_query.register(process_payment_confirmation, F.data.startswith("payment_confirm_"))
    dp.callback_query.register(process_payment_rejection, F.data.startswith("payment_reject_"))
    dp.callback_query.register(process_payment_option, F.data.in_({"pay_self", "pay_team"}))
    dp.callback_query.register(payment_approved, lambda c: c.data.startswith('payment_approved'))
    dp.callback_query.register(payment_denied, lambda c: c.data.startswith('payment_denied'))
    dp.callback_query.register(process_language_choice, lambda c: c.data.startswith('lang_'))

def register_handlers(dp: Dispatcher):
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    register_message_handlers(dp)
    register_callback_handlers(dp)






















